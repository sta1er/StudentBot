services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: student-bot-postgres
    environment:
      POSTGRES_DB: studentbot
      POSTGRES_USER: studentbot
      POSTGRES_PASSWORD: studentbot123
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - student-bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U studentbot -d studentbot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: student-bot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - student-bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: student-bot-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - student-bot-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client для создания bucket
  minio-setup:
    image: minio/mc:latest
    container_name: student-bot-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - student-bot-network
    entrypoint: >
      /bin/sh -c "
      until mc alias set minio http://minio:9000 minioadmin minioadmin123; do
        echo 'Waiting for MinIO to be ready...';
        sleep 1;
      done;
      mc mb minio/books --ignore-existing;
      mc mb minio/documents --ignore-existing;
      mc anonymous set public minio/books;
      mc anonymous set public minio/documents;
      echo 'MinIO setup completed';
      "

  # Qdrant Vector Database (REST API)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: student-bot-qdrant
    ports:
      - "6333:6333"   # REST API порт
      - "6334:6334"   # gRPC порт (не используется, но оставляем для совместимости)
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      # Конфигурация Qdrant
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      # Включаем CORS для веб-интерфейса (опционально)
      QDRANT__SERVICE__ENABLE_CORS: true
    networks:
      - student-bot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Student Bot Application
  student-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: student-bot-app
    ports:
      - "8080:8080"
      - "80:80"
    environment:
      # OpenRouter (LLM)
      OPENROUTER_ENABLED: "${OPENROUTER_ENABLED}"
      OPENROUTER_API_KEY: "${OPENROUTER_API_KEY}"
      OPENROUTER_BASE_URL: "${OPENROUTER_BASE_URL}"
      OPENROUTER_MODEL: "${OPENROUTER_MODEL}"
      OPENROUTER_MAX_TOKENS: "${OPENROUTER_MAX_TOKENS}"
      OPENROUTER_TEMPERATURE: "${OPENROUTER_TEMPERATURE}"

      # Embedding (Gemini)
      EMBEDDING_PROVIDER: "${EMBEDDING_PROVIDER}"
      GEMINI_EMBEDDING_API_KEY: "${GEMINI_EMBEDDING_API_KEY}"
      GEMINI_BASE_URL: "${GEMINI_BASE_URL}"
      GEMINI_EMBEDDING_MODEL: "${GEMINI_EMBEDDING_MODEL}"
      GEMINI_TASK_TYPE: "${GEMINI_TASK_TYPE}"

      # Qdrant
      QDRANT_HOST: "${QDRANT_HOST}"
      QDRANT_PORT: "${QDRANT_PORT}"
      QDRANT_API_KEY: "${QDRANT_API_KEY}"
      QDRANT_VECTOR_SIZE: "${QDRANT_VECTOR_SIZE}"

      # Остальные
      TELEGRAM_BOT_TOKEN: "${TELEGRAM_BOT_TOKEN}"
      TELEGRAM_BOT_USERNAME: "${TELEGRAM_BOT_USERNAME}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      MINIO_URL: "${MINIO_URL}"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY}"

    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - student-bot-network
    volumes:
      - app_logs:/app/logs
      - ./miniapp:/app/miniapp:ro  # Mini App файлы только для чтения
    restart: unless-stopped

  # Nginx Load Balancer (для масштабирования)
  nginx-lb:
    image: nginx:alpine
    container_name: student-bot-nginx
    ports:
      - "443:443"
    depends_on:
      - student-bot
    networks:
      - student-bot-network
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL сертификаты
    profiles:
      - production  # Только для продакшн-среды

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  qdrant_data:
    driver: local
  app_logs:
    driver: local

networks:
  student-bot-network:
    driver: bridge