services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: student-bot-postgres
    environment:
      POSTGRES_DB: studentbot
      POSTGRES_USER: studentbot
      POSTGRES_PASSWORD: studentbot123
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - student-bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U studentbot -d studentbot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: student-bot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - student-bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: student-bot-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9090:9090"
    volumes:
      - minio_data:/data
    networks:
      - student-bot-network
    command: server /data --console-address ":9090"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Qdrant Vector Database (REST API)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: student-bot-qdrant
    ports:
      - "6333:6333"   # REST API порт
      - "6334:6334"   # gRPC порт (не используется, но оставляем для совместимости)
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      # Конфигурация Qdrant
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      # Включаем CORS для веб-интерфейса (опционально)
      QDRANT__SERVICE__ENABLE_CORS: true
    networks:
      - student-bot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Student Bot Application
  student-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: student-bot-app
    ports:
      - "8080:8080"
    environment:
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/studentbot
      SPRING_DATASOURCE_USERNAME: studentbot
      SPRING_DATASOURCE_PASSWORD: studentbot123

      # MinIO
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123

      # Qdrant (REST API)
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      QDRANT_VECTOR_SIZE: 1536

      # Telegram Bot (нужно задать переменные окружения)
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_BOT_USERNAME: ${TELEGRAM_BOT_USERNAME}

      # Mini App
      MINIAPP_URL: ${MINIAPP_URL:-https://localhost/miniapp}

      # AI API
      AI_API_PROVIDER: openrouter
      AI_API_KEY: ${AI_API_KEY}
      OPENROUTER_MODEL: deepseek/deepseek-r1-0528:free

      # Redis (опционально)
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_ENABLED: false

    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - student-bot-network
    volumes:
      - app_logs:/app/logs
      - ./miniapp:/app/miniapp:ro  # Mini App файлы только для чтения
    restart: unless-stopped

  # Nginx Load Balancer (для масштабирования)
  nginx-lb:
    image: nginx:alpine
    container_name: student-bot-nginx
    ports:
      - "443:443"
    depends_on:
      - student-bot
    networks:
      - student-bot-network
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL сертификаты
    profiles:
      - production  # Только для продакшн-среды

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  qdrant_data:
    driver: local
  app_logs:
    driver: local

networks:
  student-bot-network:
    driver: bridge