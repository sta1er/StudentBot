package com.example.studentbot.service;

import com.example.studentbot.model.User;
import com.example.studentbot.service.UserService;
import com.example.studentbot.service.SubscriptionValidationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.webapp.WebAppInfo;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

@Component
public class TelegramBotService extends TelegramLongPollingBot {

    private static final Logger logger = LoggerFactory.getLogger(TelegramBotService.class);

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${miniapp.url}")
    private String miniAppUrl;

    @Autowired
    private UserService userService;

    @Autowired
    private AIService aiService;

    @Autowired
    private SubscriptionValidationService subscriptionValidationService;

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage()) {
                handleMessage(update.getMessage());
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update.getCallbackQuery());
            }
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String messageText = message.getText();
        org.telegram.telegrambots.meta.api.objects.User telegramUser = message.getFrom();

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = userService.registerOrUpdateUser(
                telegramUser.getId(),
                telegramUser.getFirstName(),
                telegramUser.getLastName(),
                telegramUser.getUserName(),
                telegramUser.getLanguageCode()
        );

        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getTelegramId(), messageText);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (messageText != null && messageText.startsWith("/")) {
            handleCommand(chatId, messageText, user);
        } else if (messageText != null) {
            handleTextMessage(chatId, messageText, user);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
     */
    private void handleCommand(Long chatId, String command, User user) {
        // –ö–æ–º–∞–Ω–¥–∞ /start –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if ("/start".equals(command.toLowerCase().trim())) {
            handleStartCommand(chatId, user);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if (!subscriptionValidationService.hasAccess(user)) {
            sendSubscriptionRequiredMessage(chatId, user);
            return;
        }

        switch (command.toLowerCase().split(" ")[0]) {
            case "/help":
                handleHelpCommand(chatId);
                break;
            case "/upload":
                handleUploadCommand(chatId, user);
                break;
            case "/books":
                handleBooksCommand(chatId, user);
                break;
            case "/subscription":
                handleSubscriptionCommand(chatId, user);
                break;
            default:
                sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
     */
    private void handleStartCommand(Long chatId, User user) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (!subscriptionValidationService.hasAccess(user)) {
            sendSubscriptionRequiredMessage(chatId, user);
            return;
        }

        String welcomeMessage = String.format(
                "üëã –ü—Ä–∏–≤–µ—Ç, %s!\n\n" +
                        "ü§ñ –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ò–ò.\n\n" +
                        "üìö –ß—Ç–æ —è —É–º–µ—é:\n" +
                        "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∫–Ω–∏–≥–∞–º\n" +
                        "‚Ä¢ –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n" +
                        "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n" +
                        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è\n\n" +
                        "üìä –í–∞—à —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: %s\n" +
                        "üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–Ω–∏–≥: %d –∏–∑ %d\n" +
                        "üíæ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %d –ú–ë\n\n" +
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                user.getFirstName(),
                user.getSubscriptionTier().name(),
                user.getUploadedBooksCount(),
                user.getMaxBooks(),
                user.getMaxFileSizeMB()
        );

        sendMessageWithKeyboard(chatId, welcomeMessage, createMainMenuKeyboard());
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private void sendSubscriptionRequiredMessage(Long chatId, User user) {
        var accessStatus = subscriptionValidationService.getAccessStatus(user);

        String message = String.format(
                "üîí **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n" +
                        "–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n" +
                        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n\n" +
                        "üì¢ **%s** - –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—á–µ–±—ã\n\n" +
                        "üí° **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**\n" +
                        "‚Ä¢ –ö–æ–Ω—Å–ø–µ–∫—Ç—ã –∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏\n" +
                        "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —É—á–µ–±–µ\n" +
                        "‚Ä¢ –ê–Ω–æ–Ω—Å—ã –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞\n" +
                        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n" +
                        "**–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª** ‚úÖ\n\n" +
                        "üåü _–ò–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!_",
                user.getFirstName(),
                accessStatus.getRequiredChannel()
        );

        sendMessageWithKeyboard(chatId, message, createSubscriptionCheckKeyboard(accessStatus));
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private InlineKeyboardMarkup createSubscriptionCheckKeyboard(SubscriptionValidationService.AccessStatus accessStatus) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton channelBtn = new InlineKeyboardButton();
        channelBtn.setText("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª");
        channelBtn.setUrl(accessStatus.getChannelUrl());
        row1.add(channelBtn);
        keyboard.add(row1);

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton checkBtn = new InlineKeyboardButton();
        checkBtn.setText("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É");
        checkBtn.setCallbackData("check_subscription");
        row2.add(checkBtn);
        keyboard.add(row2);

        // –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - Premium –ø–æ–¥–ø–∏—Å–∫–∞
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        InlineKeyboardButton premiumBtn = new InlineKeyboardButton();
        premiumBtn.setText("üåü –ü–æ–ª—É—á–∏—Ç—å Premium");
        premiumBtn.setCallbackData("upgrade_subscription");
        row3.add(premiumBtn);
        keyboard.add(row3);

        markup.setKeyboard(keyboard);
        return markup;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
     */
    private void handleHelpCommand(Long chatId) {
        String helpMessage = """
            üÜò **–ü–æ–º–æ—â—å**

            üìå **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
            /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            /upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
            /books - –ú–æ–∏ –∫–Ω–∏–≥–∏
            /subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
            /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

            üí° **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
            1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ Mini App
            2Ô∏è‚É£ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
            3Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –ò–ò

            üì± **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
            ‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã
            ‚Ä¢ DOCX —Ñ–∞–π–ª—ã
            ‚Ä¢ TXT —Ñ–∞–π–ª—ã

            ‚ùì **–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!
            """;

        sendMessage(chatId, helpMessage);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /upload
     */
    private void handleUploadCommand(Long chatId, User user) {
        if (!user.canUploadMoreBooks()) {
            String message = String.format(
                    "üìö **–õ–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω**\n\n" +
                            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ (%d) –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ %s.\n\n" +
                            "üí° –£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
                    user.getMaxBooks(),
                    user.getSubscriptionTier().name()
            );

            sendMessageWithKeyboard(chatId, message, createSubscriptionKeyboard());
            return;
        }

        String message = String.format(
                "üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n" +
                        "üìä **–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:**\n" +
                        "‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: %d –∏–∑ %d –∫–Ω–∏–≥\n" +
                        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: %d –ú–ë\n" +
                        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, TXT",
                user.getUploadedBooksCount(),
                user.getMaxBooks(),
                user.getMaxFileSizeMB()
        );

        sendMessageWithKeyboard(chatId, message, createUploadKeyboard());
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /books
     */
    private void handleBooksCommand(Long chatId, User user) {
        String message = "üìö **–ú–æ–∏ –∫–Ω–∏–≥–∏**\n\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:";
        sendMessageWithKeyboard(chatId, message, createBooksKeyboard());
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscription
     */
    private void handleSubscriptionCommand(Long chatId, User user) {
        String expiryInfo = user.getSubscriptionExpiryDate() != null
                ? String.format("\n‚è± –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: %s",
                user.getSubscriptionExpiryDate().toLocalDate().toString())
                : "";

        String message = String.format(
                "üí≥ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞**\n\n" +
                        "üì¶ –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: **%s**%s\n\n" +
                        "üìä **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n" +
                        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∫–Ω–∏–≥: %d\n" +
                        "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ %d –ú–ë\n\n" +
                        "üí∞ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**\n" +
                        "üÜì FREE - 5 –∫–Ω–∏–≥, 100 –ú–ë\n" +
                        "‚≠ê PREMIUM - 25 –∫–Ω–∏–≥, 500 –ú–ë - $9.99/–º–µ—Å\n" +
                        "üöÄ BUSINESS - 100 –∫–Ω–∏–≥, 1000 –ú–ë - $29.99/–º–µ—Å",
                user.getSubscriptionTier().name(),
                expiryInfo,
                user.getMaxBooks(),
                user.getMaxFileSizeMB()
        );

        sendMessageWithKeyboard(chatId, message, createSubscriptionKeyboard());
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private void handleTextMessage(Long chatId, String messageText, User user) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (!subscriptionValidationService.hasAccess(user)) {
            sendSubscriptionRequiredMessage(chatId, user);
            return;
        }

        try {
            sendChatAction(chatId, "typing");
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI —Å–µ—Ä–≤–∏—Å–∞
            String aiResponse = aiService.processTextMessage(messageText, user.getTelegramId());
            sendMessage(chatId, aiResponse);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage(), e);
            sendMessage(chatId, "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();
        Long userId = callbackQuery.getFrom().getId();

        try {
            switch (data) {
                case "check_subscription":
                    handleCheckSubscription(chatId, userId);
                    break;
                case "open_upload_app":
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    User user = userService.getUserByTelegramId(userId).orElse(null);
                    if (user != null && !subscriptionValidationService.hasAccess(user)) {
                        sendSubscriptionRequiredMessage(chatId, user);
                    }
                    break;
                case "view_books":
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    User userBooks = userService.getUserByTelegramId(userId).orElse(null);
                    if (userBooks != null && !subscriptionValidationService.hasAccess(userBooks)) {
                        sendSubscriptionRequiredMessage(chatId, userBooks);
                    }
                    break;
                case "upgrade_subscription":
                    handleSubscriptionCommand(chatId, userService.getUserByTelegramId(userId).orElse(null));
                    break;
            }

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
            answerCallbackQuery(callbackQuery.getId());
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private void handleCheckSubscription(Long chatId, Long userId) {
        User user = userService.getUserByTelegramId(userId).orElse(null);
        if (user == null) {
            sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        if (subscriptionValidationService.hasAccess(user)) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            String successMessage = String.format(
                    "‚úÖ **–û—Ç–ª–∏—á–Ω–æ, %s!**\n\n" +
                            "üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª @chota_study –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n" +
                            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ.\n\n" +
                            "üìö **–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n" +
                            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ %d –∫–Ω–∏–≥\n" +
                            "‚Ä¢ –§–∞–π–ª—ã –¥–æ %d –ú–ë\n" +
                            "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n" +
                            "‚Ä¢ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫\n\n" +
                            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ",
                    user.getFirstName(),
                    user.getMaxBooks(),
                    user.getMaxFileSizeMB()
            );

            sendMessageWithKeyboard(chatId, successMessage, createMainMenuKeyboard());
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            var accessStatus = subscriptionValidationService.getAccessStatus(user);
            String notSubscribedMessage = String.format(
                    "‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n" +
                            "%s, –ø–æ—Ö–æ–∂–µ –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª %s\n\n" +
                            "üîÑ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n" +
                            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª¬ª\n" +
                            "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª %s\n" +
                            "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª\n\n" +
                            "üí° _–ò–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ Premium –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!_",
                    user.getFirstName(),
                    accessStatus.getRequiredChannel(),
                    accessStatus.getRequiredChannel()
            );

            sendMessageWithKeyboard(chatId, notSubscribedMessage, createSubscriptionCheckKeyboard(accessStatus));
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
     */
    private InlineKeyboardMarkup createMainMenuKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton uploadBtn = createWebAppButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥–∏", miniAppUrl);
        row1.add(uploadBtn);
        keyboard.add(row1);

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton booksBtn = createWebAppButton("üìö –ú–æ–∏ –∫–Ω–∏–≥–∏", miniAppUrl + "?tab=books");
        InlineKeyboardButton subscriptionBtn = new InlineKeyboardButton();
        subscriptionBtn.setText("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞");
        subscriptionBtn.setCallbackData("upgrade_subscription");
        row2.add(booksBtn);
        row2.add(subscriptionBtn);
        keyboard.add(row2);

        markup.setKeyboard(keyboard);
        return markup;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    private InlineKeyboardMarkup createUploadKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton uploadBtn = createWebAppButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", miniAppUrl);
        row.add(uploadBtn);
        keyboard.add(row);

        markup.setKeyboard(keyboard);
        return markup;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–Ω–∏–≥
     */
    private InlineKeyboardMarkup createBooksKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton booksBtn = createWebAppButton("üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏", miniAppUrl + "?tab=books");
        row.add(booksBtn);
        keyboard.add(row);

        markup.setKeyboard(keyboard);
        return markup;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private InlineKeyboardMarkup createSubscriptionKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton premiumBtn = new InlineKeyboardButton();
        premiumBtn.setText("‚≠ê PREMIUM - $9.99");
        premiumBtn.setCallbackData("buy_premium");
        row1.add(premiumBtn);
        keyboard.add(row1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton businessBtn = new InlineKeyboardButton();
        businessBtn.setText("üöÄ BUSINESS - $29.99");
        businessBtn.setCallbackData("buy_business");
        row2.add(businessBtn);
        keyboard.add(row2);

        markup.setKeyboard(keyboard);
        return markup;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Web App
     */
    private InlineKeyboardButton createWebAppButton(String text, String url) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        WebAppInfo webAppInfo = new WebAppInfo(url);
        button.setWebApp(webAppInfo);
        return button;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("Markdown");

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     */
    private void sendMessageWithKeyboard(Long chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("Markdown");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {}", e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ chat action
     */
    private void sendChatAction(Long chatId, String action) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ chat action
    }

    /**
     * –û—Ç–≤–µ—Ç –Ω–∞ callback query
     */
    private void answerCallbackQuery(String callbackQueryId) {
        try {
            AnswerCallbackQuery answer = new AnswerCallbackQuery();
            answer.setCallbackQueryId(callbackQueryId);
            execute(answer);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query: {}", e.getMessage());
        }
    }
}