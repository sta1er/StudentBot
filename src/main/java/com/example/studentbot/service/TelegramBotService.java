package com.example.studentbot.service;

import com.example.studentbot.model.ChatHistory;
import com.example.studentbot.model.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.FileInputStream;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å Telegram –±–æ—Ç–∞
 */
@Component
public class TelegramBotService extends TelegramLongPollingBot {
    
    private static final Logger logger = LoggerFactory.getLogger(TelegramBotService.class);
    
    @Value("${telegram.bot.token}")
    private String botToken;
    
    @Value("${telegram.bot.username}")
    private String botUsername;
    
    @Autowired
    private UserService userService;
    
    @Autowired
    private AIService aiService;
    
    @Autowired
    private BookService bookService;
    
    @Override
    public String getBotToken() {
        return botToken;
    }
    
    @Override
    public String getBotUsername() {
        return botUsername;
    }
    
    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage()) {
                handleMessage(update.getMessage());
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update);
            }
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String messageText = message.getText();
        org.telegram.telegrambots.meta.api.objects.User telegramUser = message.getFrom();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = userService.registerOrUpdateUser(
            telegramUser.getId(),
            telegramUser.getFirstName(),
            telegramUser.getLastName(),
            telegramUser.getUserName(),
            telegramUser.getLanguageCode()
        );
        
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getTelegramId(), messageText);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (messageText != null && messageText.startsWith("/")) {
            handleCommand(chatId, messageText, user);
        } else if (message.hasDocument()) {
            handleDocument(chatId, message, user);
        } else if (messageText != null) {
            handleTextMessage(chatId, messageText, user);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
     */
    private void handleCommand(Long chatId, String command, User user) {
        switch (command.toLowerCase()) {
            case "/start":
                handleStartCommand(chatId, user);
                break;
            case "/help":
                handleHelpCommand(chatId);
                break;
            case "/books":
                handleBooksCommand(chatId, user);
                break;
            case "/history":
                handleHistoryCommand(chatId, user);
                break;
            case "/settings":
                handleSettingsCommand(chatId, user);
                break;
            default:
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
     */
    private void handleStartCommand(Long chatId, User user) {
        String welcomeMessage = String.format(
            "–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n" +
            "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" +
            "üìö –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∫–Ω–∏–≥–∞–º\n" +
            "üí° –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n" +
            "üìù –ü–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n" +
            "üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö\n\n" +
            "–ó–∞–≥—Ä—É–∑–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!",
            user.getFirstName()
        );
        
        sendMessageWithKeyboard(chatId, welcomeMessage, createMainMenuKeyboard());
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
     */
    private void handleHelpCommand(Long chatId) {
        String helpMessage = 
            "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
            "/books - –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥\n" +
            "/history - –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n" +
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n\n" +
            "üìå –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n" +
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞\n" +
            "‚Ä¢ PDF, DOCX –∏–ª–∏ TXT —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n" +
            "‚Ä¢ –ö–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è";
        
        sendMessage(chatId, helpMessage);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /books
     */
    private void handleBooksCommand(Long chatId, User user) {
        try {
            var books = bookService.getUserBooks(user.getTelegramId());
            if (books.isEmpty()) {
                sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!");
            } else {
                StringBuilder message = new StringBuilder("üìö –í–∞—à–∏ –∫–Ω–∏–≥–∏:\n\n");
                books.forEach(book -> {
                    message.append(String.format("üìñ %s\n", book.getTitle()));
                    if (book.getAuthor() != null) {
                        message.append(String.format("‚úçÔ∏è %s\n", book.getAuthor()));
                    }
                    message.append(String.format("üìÖ %s\n\n", 
                        book.getUploadDate().toLocalDate()));
                });
                sendMessage(chatId, message.toString());
            }
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥: {}", e.getMessage());
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥.");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /history
     */
    private void handleHistoryCommand(Long chatId, User user) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        sendMessage(chatId, "–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏!");
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings
     */
    private void handleSettingsCommand(Long chatId, User user) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        sendMessage(chatId, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏!");
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private void handleTextMessage(Long chatId, String messageText, User user) {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            sendChatAction(chatId, "typing");
            
            long startTime = System.currentTimeMillis();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            ChatHistory chatHistory = new ChatHistory(user, messageText, ChatHistory.MessageType.TEXT);
            chatHistory.setStatus(ChatHistory.ProcessingStatus.PROCESSING);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI —Å–µ—Ä–≤–∏—Å–∞
            String aiResponse = aiService.processTextMessage(messageText, user.getTelegramId());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            long processingTime = System.currentTimeMillis() - startTime;
            chatHistory.setBotResponse(aiResponse);
            chatHistory.setProcessingTimeMs((int) processingTime);
            chatHistory.setStatus(ChatHistory.ProcessingStatus.COMPLETED);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sendMessage(chatId, aiResponse);
            
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ {} –º—Å", processingTime);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage(), e);
            sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
     */
    private void handleDocument(Long chatId, Message message, User user) {
        try {
            sendMessage(chatId, "üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç...");

            Document document = message.getDocument();
            String fileId = document.getFileId();
            String fileName = document.getFileName();
            Long userId = user.getTelegramId();
            String mimeType = document.getMimeType();
            Long fileSize = document.getFileSize();

            GetFile getFileMethod = new GetFile();
            getFileMethod.setFileId(fileId);
            File telegramFile = execute(getFileMethod);

            java.io.File downloadFile = java.io.File.createTempFile("studentbot-", fileName);
            downloadFile.deleteOnExit();
            downloadFile(telegramFile.getFilePath(), downloadFile);

            try (InputStream inputStream = new FileInputStream(downloadFile)) {
                bookService.uploadDocument(
                        fileId,
                        fileName,
                        userId,
                        inputStream,
                        fileSize != null ? fileSize : downloadFile.length(),
                        mimeType != null ? mimeType : "application/octet-stream"
                );
            }

            sendMessage(chatId, String.format("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é.", fileName));

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {}", e.getMessage(), e);
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }


    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private void handleCallbackQuery(Update update) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        
        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     */
    private void sendMessageWithKeyboard(Long chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setReplyMarkup(keyboard);
        
        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
     */
    private void sendChatAction(Long chatId, String action) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ chat action
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
     */
    private InlineKeyboardMarkup createMainMenuKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton booksButton = new InlineKeyboardButton();
        booksButton.setText("üìö –ú–æ–∏ –∫–Ω–∏–≥–∏");
        booksButton.setCallbackData("books");
        row1.add(booksButton);
        
        InlineKeyboardButton helpButton = new InlineKeyboardButton();
        helpButton.setText("‚ùì –ü–æ–º–æ—â—å");
        helpButton.setCallbackData("help");
        row1.add(helpButton);
        
        keyboard.add(row1);
        markup.setKeyboard(keyboard);
        
        return markup;
    }
}