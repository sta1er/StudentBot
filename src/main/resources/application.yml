server:
  port: 8080

spring:
  application:
    name: student-helper-bot

  # Database configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/studentbot
    username: studentbot
    password: studentbot123
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000

  # JPA configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true

  # Jackson configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    default-property-inclusion: NON_NULL

  # Multipart file upload configuration
  servlet:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB

# Telegram Bot Configuration
telegram:
  bot:
    token: ${TELEGRAM_BOT_TOKEN}
    username: ${TELEGRAM_BOT_USERNAME}

# Mini App Configuration
miniapp:
  url: ${MINIAPP_URL:https://your-domain.com/miniapp}
  cors:
    allowed-origins:
      - https://web.telegram.org
      - https://telegram.org
      - https://your-domain.com

# MinIO Configuration
minio:
  url: ${MINIO_URL:http://localhost:9000}
  access-key: ${MINIO_ACCESS_KEY:minioadmin}
  secret-key: ${MINIO_SECRET_KEY:minioadmin123}
  buckets:
    books: books
    documents: documents

# ===== РАЗДЕЛЕННАЯ КОНФИГУРАЦИЯ AI API =====

# OpenRouter Configuration (для языковых моделей)
openrouter:
  enabled: ${OPENROUTER_ENABLED:true}
  api-key: ${OPENROUTER_API_KEY}
  base-url: ${OPENROUTER_BASE_URL:https://openrouter.ai/api/v1}
  model: ${OPENROUTER_MODEL:deepseek/deepseek-r1-0528:free}
  # Параметры для языковых моделей
  max-tokens: ${OPENROUTER_MAX_TOKENS:2000}
  temperature: ${OPENROUTER_TEMPERATURE:0.7}

# Embedding Configuration (для векторизации)
embedding:
  provider: ${EMBEDDING_PROVIDER:yandex} # gemini, openai, huggingface, yandex

  # Gemini Embedding
  gemini:
    api-key: ${GEMINI_EMBEDDING_API_KEY}
    base-url: ${GEMINI_BASE_URL:https://generativelanguage.googleapis.com/v1beta}
    model: ${GEMINI_EMBEDDING_MODEL:models/text-embedding-004} # или embedding-001
    # Gemini-specific настройки
    task-type: ${GEMINI_TASK_TYPE:RETRIEVAL_DOCUMENT} # RETRIEVAL_DOCUMENT, RETRIEVAL_QUERY, SEMANTIC_SIMILARITY

  # OpenAI Embedding
  openai:
    api-key: ${OPENAI_EMBEDDING_API_KEY:}
    base-url: ${OPENAI_BASE_URL:https://api.openai.com/v1}
    model: ${OPENAI_EMBEDDING_MODEL:text-embedding-3-small}

  # Hugging Face Embedding
  huggingface:
    api-key: ${HUGGINGFACE_API_KEY:}
    base-url: ${HUGGINGFACE_BASE_URL:https://api-inference.huggingface.co}
    model: ${HUGGINGFACE_EMBEDDING_MODEL:sentence-transformers/all-MiniLM-L6-v2}

  # Yandex Cloud Embedding
  yandex:
    api-key: ${YANDEX_EMBEDDING_API_KEY}
    base-url: ${YANDEX_BASE_URL:https://llm.api.cloud.yandex.net}
    folder-id: ${YANDEX_FOLDER_ID}
    model: ${YANDEX_EMBEDDING_MODEL:text-search-doc} # text-search-doc или text-search-query

# RAG Configuration
rag:
  max-context-length: ${RAG_MAX_CONTEXT:3000}
  max-chunks: ${RAG_MAX_CHUNKS:5}

# Qdrant Vector Database Configuration
qdrant:
  host: ${QDRANT_HOST:localhost}
  port: ${QDRANT_PORT:6333}
  api-key: ${QDRANT_API_KEY:}
  collection:
    name: "user_books_collection"
  vector:
    size: ${QDRANT_VECTOR_SIZE:256}
  search:
    limit: ${QDRANT_SEARCH_LIMIT:8}
    score_threshold: ${QDRANT_SCORE_THRESHOLD:0.75}

# Channel Subscription Configuration
channel:
  required: ${CHANNEL_REQUIRED:@chota_study}
  enabled: ${CHANNEL_CHECK_ENABLED:true}

# Subscription Configuration
subscription:
  tiers:
    free:
      max-books: 5
      max-file-size-mb: 100
      price: 0
    premium:
      max-books: 25
      max-file-size-mb: 500
      price: 9.99
    business:
      max-books: 100
      max-file-size-mb: 1000
      price: 29.99
  payment:
    enabled: ${PAYMENT_ENABLED:false}
    provider: ${PAYMENT_PROVIDER:stripe}
    webhook-secret: ${PAYMENT_WEBHOOK_SECRET}

# File Upload Limits
file:
  upload:
    max-size-mb: 500
    allowed-types:
      - application/pdf
      - application/vnd.openxmlformats-officedocument.wordprocessingml.document
      - text/plain
  virus-scan:
    enabled: ${VIRUS_SCAN_ENABLED:false}

# Security Configuration
security:
  jwt:
    secret: ${JWT_SECRET:your-secret-key-change-in-production}
    expiration: ${JWT_EXPIRATION:86400}
  rate-limiting:
    enabled: ${RATE_LIMITING_ENABLED:true}
    requests-per-minute: 60
    requests-per-hour: 1000

# Logging configuration
logging:
  level:
    com.example.studentbot: INFO
    org.springframework: WARN
    org.hibernate: WARN
    org.telegram: WARN
    org.springframework.web.reactive.function.client: DEBUG
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/student-bot.log
    max-size: 10MB
    max-history: 7

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      cors:
        allowed-origins: "*"
        allowed-methods: GET,POST
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# Cache Configuration
cache:
  redis:
    enabled: ${REDIS_ENABLED:false}
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    timeout: 2000ms

# Feature Flags
features:
  mini-app:
    enabled: true
    file-upload: true
    subscription-management: true
  ai:
    enabled: true
    multi-model: true
    rag: true
  analytics:
    enabled: ${ANALYTICS_ENABLED:false}
    service: ${ANALYTICS_SERVICE:google}